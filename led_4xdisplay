----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/26/2024 10:13:01 AM
-- Design Name: 
-- Module Name: seg_dc - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;

entity seven_segment_display_VHDL is
    Port ( clock_100Mhz : in STD_LOGIC;-- 100Mhz clock 
           reset : in STD_LOGIC; -- reset
           Anode_Activate : out STD_LOGIC_VECTOR (3 downto 0);-- 4 Anode signals
           Seven_Segment : out STD_LOGIC_VECTOR (6 downto 0));-- Cathode patterns of 7-segment display
end seven_segment_display_VHDL;

architecture Behavioral of seven_segment_display_VHDL is
signal one_second_counter: STD_LOGIC_VECTOR (27 downto 0);
-- counter for generating 1-second clock enable
signal one_second_enable: std_logic;
-- one second enable for counting numbers
signal displayed_number: STD_LOGIC_VECTOR (16 downto 0);
-- counting decimal number to be displayed on 4-digit 7-segment display
signal LED_BCD: STD_LOGIC_VECTOR (4 downto 0);
signal refresh_counter: STD_LOGIC_VECTOR (19 downto 0);
-- creating 10.5ms refresh period
signal LED_activating_counter: std_logic_vector(1 downto 0);
-- the other 2-bit for creating 4 LED-activating signals
-- count         0    ->  1  ->  2  ->  3
-- activates    LED1    LED2   LED3   LED4
-- and repeat
begin

-- VHDL code for BCD to 7-segment decoder
-- Cathode patterns of the 7-segment LED display 
process(LED_BCD)
begin
     case LED_BCD is
    when "00000" =>
        Seven_Segment <= "1011111"; -- A
    when "00001" =>
        Seven_Segment <= "1111100"; -- B
    when "00010" =>
        Seven_Segment <= "1011000"; -- C
    when "00011" =>
        Seven_Segment <= "1011110"; -- D
    when "00100" =>
        Seven_Segment <= "1111001"; -- E
    when "00101" =>
        Seven_Segment <= "1110001"; -- F
    when "00110" =>
        Seven_Segment <= "0111110"; -- G
    when "00111" =>
        Seven_Segment <= "1110100"; -- H
    when "01000" =>
        Seven_Segment <= "0010001"; -- I
    when "01001" =>
        Seven_Segment <= "0001101"; -- J
    when "01010" =>
        Seven_Segment <= "1110101"; -- K
    when "01011" =>
        Seven_Segment <= "0111000"; -- L
    when "01100" =>
        Seven_Segment <= "1010101"; -- M
    when "01101" =>
        Seven_Segment <= "1010100"; -- N
    when "01110" =>
        Seven_Segment <= "1011100"; -- O
    when "01111" =>
        Seven_Segment <= "1110011"; -- P
    when "10000" =>
        Seven_Segment <= "1100111"; -- Q
    when "10001" =>
        Seven_Segment <= "1010000"; -- R
    when "10010" =>
        Seven_Segment <= "0101101"; -- S
    when "10011" =>
        Seven_Segment <= "1111000"; -- T
    when "10100" =>
        Seven_Segment <= "0011100"; -- U
    when "10101" =>
        Seven_Segment <= "0101010"; -- V
    when "10110" =>
        Seven_Segment <= "1101010"; -- W
    when "10111" =>
        Seven_Segment <= "0010100"; -- X
    when "11000" =>
        Seven_Segment <= "1101110"; -- Y
    when "11001" =>
        Seven_Segment <= "0011011"; -- Z
    when others =>
        Seven_Segment <= "1111111"; -- null
end case;

end process;
-- 7-segment display controller
-- generate refresh period of 10.5ms

process(clock_100Mhz,reset)
begin 
    if(reset='1') then
        refresh_counter <= (others => '0');
    elsif(rising_edge(clock_100Mhz)) then
        refresh_counter <= refresh_counter + 1;
    end if;
end process;

 LED_activating_counter <= refresh_counter(19 downto 18);
-- 4-to-1 MUX to generate anode activating signals for 4 LEDs 
process(LED_activating_counter)
begin
    case LED_activating_counter is
    when "00" =>
        Anode_Activate <= "0111"; 
        -- activate LED1 and Deactivate LED2, LED3, LED4
        LED_BCD <= displayed_number(16 downto 12);
        -- the first hex digit of the 16-bit number
    when "01" =>
        Anode_Activate <= "1011"; 
        -- activate LED2 and Deactivate LED1, LED3, LED4
        LED_BCD <= displayed_number(12 downto 8);
        -- the second hex digit of the 16-bit number
    when "10" =>
        Anode_Activate <= "1101"; 
        -- activate LED3 and Deactivate LED2, LED1, LED4
        LED_BCD <= displayed_number(8 downto 4);
        -- the third hex digit of the 16-bit number
    when "11" =>
        Anode_Activate <= "1110"; 
        -- activate LED4 and Deactivate LED2, LED3, LED1
        LED_BCD <= displayed_number(4 downto 0);
        -- the fourth hex digit of the 16-bit number
    when others =>
         Anode_Activate <= "0000";  
         LED_BCD <= displayed_number(4 downto 0);
    end case;
end process;

-- Counting the number to be displayed on 4-digit 7-segment Display 

process(clock_100Mhz, reset)
begin
        if(reset='1') then
            one_second_counter <= (others => '0');
        elsif(rising_edge(clock_100Mhz)) then
            if(one_second_counter>=x"5F5E0FF") then
                one_second_counter <= (others => '0');
            else
                one_second_counter <= one_second_counter + "0000001";
            end if;
        end if;
end process;
one_second_enable <= '1' when one_second_counter=x"5F5E0FF" else '0';
process(clock_100Mhz, reset)
begin
        if(reset='1') then
            displayed_number <= (others => '0');
        elsif(rising_edge(clock_100Mhz)) then
             if(one_second_enable='1') then
                displayed_number <= displayed_number + x"0001";
             end if;
        end if;
end process;
end Behavioral;
